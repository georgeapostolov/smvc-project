<?	class model_public_user extends base_model {		private $password_salt = 'smvc_user_salt';				public function __construct() {			parent::__construct();		}		public function get_password_salt() {			return $this->password_salt;		}				public function get_users() {			$query = 'select `id`, `username`, `tfa_enabled` from users where is_public = 1';			$this->db->query($query);			$users = array();			while (false != ($result = $this->db->fetch())) {				$users[$result['id']] = $result;			}			return $users;		}		public function add_tfa_secret($user_id = 0, $secret = '') {			if (empty($user_id) || empty($secret)) {				return false;			}			$query = '				UPDATE `users` SET					`tfa_enabled` = 1,					`tfa_secret` = "' . $this->db->escape($secret) . '"				WHERE 1					AND `id` = "' . (int)$user_id . '"					AND `tfa_enabled` = 0					AND `tfa_secret` = ""				LIMIT 1			';			$this->db->query($query);			$_SESSION['user_data']['tfa_enabled'] = 1;			return true;		}		public function remove_tfa_secret($user_id = 0, $secret = '') {			if (empty($user_id) || empty($secret)) {				return false;			}			$query = '				UPDATE `users` SET					`tfa_enabled` = 0,					`tfa_secret` = ""				WHERE 1					AND `id` = "' . (int)$user_id . '"					AND `tfa_enabled` = 1					AND `tfa_secret` = "' . $this->db->escape($secret) . '"				LIMIT 1			';			$this->db->query($query);			$_SESSION['user_data']['tfa_enabled'] = 0;			return true;		}		public function get_password($user_id = 0) {			$query = '				SELECT					`password`				FROM `users`				WHERE 1					AND `id` = "' . (int)$user_id . '"				LIMIT 1			';			$this->db->query($query);			$data = $this->db->fetch();			if ($data) {				return $data['password'];			}			return '';		}		public function get_tfa_secret($user_id = 0) {			$query = '				SELECT					`tfa_secret`				FROM `users`				WHERE 1					AND `tfa_enabled` = 1					AND `id` = "' . (int)$user_id . '"				LIMIT 1			';			$this->db->query($query);			$data = $this->db->fetch();			if ($data) {				return $data['tfa_secret'];			}			return '';		}		public function register($username = '', $password = '', $password2 = '') {			$username = trim(strip_tags(addslashes($username)));			$password = trim(strip_tags(addslashes($password)));			$password2 = trim(strip_tags(addslashes($password2)));			if (empty($username)) {				$register = array(					'success'	=> 0,					'error'		=> 1,					'message'	=> 'User cannot be empty',				);			}			elseif (!preg_match("/^[a-zA-Z0-9]+$/", $username)) {				$register = array(					'success'	=> 0,					'error'		=> 1,					'message'	=> 'Username must be only letters and numbers',				);			}			elseif (empty($password) || empty($password2)) {				$register = array(					'success'	=> 0,					'error'		=> 1,					'message'	=> 'Passwords cannot be empty',				);			}			elseif ($password != $password2) {				$register = array(					'success'	=> 0,					'error'		=> 1,					'message'	=> 'Wrong confirm password',				);			}			else {				$this->db->query('SELECT `id` FROM `users` WHERE `username` = "' . $this->db->escape($username) . '" LIMIT 1');				$user = $this->db->fetch();				if (!isset($user['id']) || empty($user['id'])) {					$e_password = crypt($password, '$2a$09$' . md5($this->get_password_salt()) . '$');					$query = '						INSERT INTO `users` SET							`username` = "' . $this->db->escape($username) . '",							`password` = "' . $this->db->escape($e_password) . '",							`date_created` = UNIX_TIMESTAMP()					';					$this->db->query($query);					return $this->login($username, $password);				}				else {					$register = array(						'success'	=> 0,						'error'		=> 1,						'message'	=> 'User already exists',					);				}			}			return $register;		}		public function login($username = '', $password = '') {			$username = trim(strip_tags(addslashes($username)));			$this->db->query('SELECT `id`, `username`, `password`, `tfa_enabled`, `tfa_secret` FROM `users` WHERE `username` = "' . $this->db->escape($username) . '" LIMIT 1');			$user = $this->db->fetch();			if (!isset($user['username']) || empty($user['username'])) {				$login = array(					'success'	=> 0,					'error'		=> 1,					'message'	=> 'User not found',				);			}			else {				if (isset($_SESSION['tfa_enabled']) && ($_SESSION['tfa_enabled'] == $username)) {					if (($user['tfa_enabled'] == 1) && ($user['tfa_secret'] != '')) {						if (mb_strlen($password) == 6) {							$tfa_verified = model_admin_tfa::verify($user['tfa_secret'], $password);							if ($tfa_verified) {								unset($user['password']);								unset($user['tfa_secret']);								$_SESSION['user_data'] = $user;								$login = array(									'success'	=> 1,									'error'		=> 0,									'message'	=> 'Login success',								);								return $login;							} else {								$login = array(									'success'	=> 0,									'error'		=> 1,									'message'	=> 'Wrong 2FA code',								);								return $login;							}						} else {							$login = array(								'success'	=> 0,								'error'		=> 1,								'message'	=> 'Wrong 2FA code length',							);							return $login;						}					}				}				$password = crypt(trim($password), '$2a$09$' . md5($this->get_password_salt()) . '$');				if ($password == $user['password']) {					unset($user['password']);					if ($user['tfa_enabled'] == 1) {						if ($user['tfa_secret'] == '') {							$login = array(								'success'	=> 0,								'error'		=> 1,								'message'	=> '2FA is enabled, but no code',							);						} else {							$_SESSION['tfa_enabled'] = $username;							$login = array(								'success'	=> 0,								'error'		=> 1,								'message'	=> '2FA is enabled',							);						}					} else {						$_SESSION['user_data'] = $user;						$login = array(							'success'	=> 1,							'error'		=> 0,							'message'	=> 'Login success',						);					}				}				else {					$login = array(						'success'	=> 0,						'error'		=> 1,						'message'	=> 'Wrong password',					);				}			}			return $login;		}		public function change_password($user_id = 0, $old_password = '', $new_password = '') {			if (empty($user_id) || empty($old_password) || empty($new_password)) {				return false;			}			$query = '				UPDATE `users` SET					`password` = "' . $this->db->escape($new_password) . '"				WHERE 1					AND `id` = "' . (int)$user_id . '"					AND `password` = "' . $this->db->escape($old_password) . '"				LIMIT 1			';			$this->db->query($query);			return true;		}	}